import React, { useEffect, useState } from 'react'
import { useForm, Controller } from 'react-hook-form'
import { useDispatch } from 'react-redux'
import { updateLoginState } from "@/features/formSlice"
import CustomButton from "@/components/Button"
import CustomTextField from '@/components/CustomTextField'
import { Alert, Box, Divider, IconButton, Snackbar, Typography } from '@mui/material'
import Head from 'next/head'
import bgImg from "../../../public/assets/background3.jpg"
import Navbar from '@/components/Navbar'
import { useRouter } from 'next/router'
import CloseIcon from "@mui/icons-material/Close";



export const bgImgStyling = {
    background: `url(${bgImg.src})`,
    zIndex: '-1',
    backgroundSize: 'cover', position: 'absolute', width: '100%',
}

const baseURl = process.env.NEXT_PUBLIC_API_URL

const LoginForm = () => {
  
    const [openAlert, setOpenAlert] = useState(false);
    const router = useRouter()
    const dispatch = useDispatch()
    const { control,
        handleSubmit,
        reset,
        formState: { errors } } = useForm({
            defaultValues: {
                password: "",
                email_id: "",
            },
        })

    useEffect(() => {
        dispatch(updateLoginState({ adminLogin: false, userLogin: false, loginuserData: null }))
    }, [])

    function handleAlertClose(e, reason) {
        setOpenAlert(false);
    }


    async function onSubmit(data) {
        
        try {
            const res = await fetch(`${baseURl}/user/login`, {
                method: 'POST',
                headers: {
                    "Content-Type": 'application/json'
                },
                body: JSON.stringify({
                    email_id: data.email_id,
                    password: data.password
                })
            })

            const user = await res.json();
            const userDetailObj = user.result.list
            if (user.result.list.user_type === 1) {
                dispatch(updateLoginState({ adminLogin: true, userLogin: false, loginuserData: userDetailObj }))
                setOpenAlert(true)
                router.push('/Admin/ShopList')
            }
            else if (user.result.list.user_type === 2) {
                if (user.result.list.approval_status === 1) {
                    alert("Your Account approval is pending");
                    return;
                }
                setOpenAlert(true)
                dispatch(updateLoginState({ adminLogin: false, userLogin: true, loginuserData: userDetailObj }))
                router.push({
                    pathname: '/RTR/UserRTRlist',
                    query: { user_id: user.result.list.user_id },
                },
                    undefined,
                    { shallow: true }
                )
            }
        } catch (e) {
            const error = new Error("Unauthorize User or Recheck your Email ID and Password")
            
            alert(error)
            reset()
        }

    }
    const formParentStyling = {
        width: { xs: '98%', lg: '40%' },
        margin: '0 auto',
        p: { xs: '0.5rem', lg: '2rem' },
        borderRadius: '20px',
        position: 'relative',
        top: { xs: '30px', md: '50', lg: '100px', xl: '120px' },
        // minHeight: 'calc(100vh - 95px)'
    }
    return (
        <>
            <Head>
                <title>Eswatini Environment Authority</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/favicon.png" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
            </Head>
            <Navbar />
            <Box sx={{ ...formParentStyling }}>
                <Box className='flex flex-col gap-4 bg-white shadow-2xl p-4 rounded-xl  w-full sm:w-3/4 lg:w-full'
                    component='form' onSubmit={handleSubmit(onSubmit)}
                >
                    <Box sx={{ marginBottom: '2rem' }}>
                        <Typography variant='h1' sx={{ fontSize: { xs: '1.5rem', md: '2rem', lg: '2.4rem' }, color: '#2C306F' }}>
                            Plastic Return Filing System
                        </Typography>
                    </Box>
                    <Controller
                        control={control}
                        name="email_id"
                        render={({ field }) => <CustomTextField field={field} inputType='text'
                            fieldLabel='Enter Email' errorDetail='email_id' errors={errors}
                        />}>
                    </Controller>

                    <Controller
                        control={control}
                        name="password"
                        rules={{ required: 'Password is required' }}
                        render={({ field }) => <CustomTextField field={field} inputType='password'
                            fieldLabel='Enter Password' errorDetail='password' errors={errors}
                        />}>
                    </Controller>
                    <Box className="flex justify-center gap-8 ">
                        <CustomButton type='submit' text='Login' bgColor='#1f892a' />

                        <Box className="flex justify-center gap-8 ">


                            <CustomButton text='Register' bgColor='#1f892a' handleClick={() => router.push('/Signup/Signup')} />

                        </Box>

                    </Box>


                </Box>
            </Box>
            <Snackbar
                open={openAlert}
                autoHideDuration={2000}
                onClose={handleAlertClose}
                action={
                    <IconButton onClick={handleAlertClose}>
                        <CloseIcon />
                    </IconButton>
                }
                anchorOrigin={{ vertical: "bottom", horizontal: "left" }}
            >
                <Alert variant="filled" severity="success" onClose={handleAlertClose}>
                    Logged-in Successfully
                </Alert>
            </Snackbar>
        </>
    )
}

export default LoginForm


// export async function getServerSideProps({ context }) {

//     const hello = "hello"
//     return { props: { hello } }
// }