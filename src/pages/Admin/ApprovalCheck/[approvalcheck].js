import React, { useEffect, useState } from 'react'
import { useSelector, useDispatch } from 'react-redux'
import { useForm, Controller } from 'react-hook-form'
import { Box, Button, CircularProgress, Dialog, DialogActions, DialogTitle, Slide, Typography } from '@mui/material'
import Head from 'next/head'
import CustomTextField from '@/components/CustomTextField'
import CustomButton from '@/components/Button'
import Navbar from '@/components/Navbar'
import { useFetch } from '@/constants/useFetch'
import { useRouter } from 'next/router'
import fetching from '@/constants/fetching'
import Footer from '@/components/Footer'
import useLoginCheck from '@/hooks/useLoginCheck'


const Transition = React.forwardRef(function Transition(props, ref) {
    return <Slide direction="up" ref={ref} {...props} />;
});

const Approvalcheck = () => {

    const router = useRouter();
    const { query: { approvalcheck: userId } = userId } = router
    const { query } = router
    const [useFormData, setUserFormData] = useState({})
    // console.log('inside status', query.check)
    const { data: registerData, error, errorMessage, fetchAPI } = useFetch('get', `/user/single_user_details/${userId}`)
    const dispatch = useDispatch()
    const { loginCheck } = useLoginCheck()
    

    const { control, handleSubmit, watch, reset, formState: { errors } } = useForm({
        defaultValues: useFormData || {
            name_of_business: '',
            address: '',
            tin: '',
            first_name: '',
            designation: '',
            telephone_number: '',
            cell_phone_number: '',
            email_id: '',
        }
    })

    const [open, setOpen] = useState(false);
    const [openReject, setOpenReject] = useState(false);

    const handleClickOpen = () => {
        setOpen(true);
    };
    const handleClickOpenReject = () => {
        setOpenReject(true);
    }
    const handleClose = () => {
        setOpen(false);
    };
    const handleClose2 = () => {
        setOpenReject(false);
    };


    // calling useFetch manually

    useEffect(() => {
        loginCheck()
        fetchAPI(); // Trigger the API request when the component mounts
    }, [fetchAPI]);

    useEffect(() => {
        if (registerData !== null) {
            setUserFormData(registerData.result.list)
            reset(registerData.result.list)

        }
    }, [registerData, dispatch, reset])



    const onsubmit = async () => {
        // console.log("checking")
        try {
            await fetching('put', `/admin/user_aprovel/${userId}`, { approval_status: 2, email_id: useFormData.email_id })
        } catch (error) {

        }
        router.push('/Admin/ShopList')
    }
    const onsubmit2 = async () => {
        // console.log("checking2")
        try {
            await fetching('put', `/admin/user_aprovel/${userId}`, { approval_status: 3, email_id: useFormData.email_id })
        } catch (error) {
        }
        router.push('/Admin/ShopList')
    }


    const formParentStyling = {
        width: { xs: '98%', lg: '80%' },
        margin: '0 auto',
        p: { xs: '0.5rem', lg: '2rem' },
        borderRadius: '20px',
        position: 'relative',
        top: '0',
        minHeight: { xs: '100vh', lg: '800px' }
    }

    if (!registerData) {
        // Render a loading spinner or placeholder until the data is fetched
        return <CircularProgress sx={{ width: '100%', height: '100%', position: 'absolute', top: '50%', left: '50%', transform: 'translate(-50%, -50%)', background: 'transparent' }} />;
    }
    // console.log(checkState)
    return (
        <>
            <Head>
                <title>Eswatini Environment Authority</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/favicon.png" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
            </Head>
            <Navbar />
            {/* <Box sx={{ ...bgImgStyling }}>
                </Box> */}

            <Box sx={{ ...formParentStyling }}>
                <Box className='grid grid-cols-2 gap-4 bg-white shadow-2xl p-4 rounded-xl absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-full sm:w-3/4 lg:w-full md:p-32 lg:p-24'
                    component='form' onSubmit={handleSubmit(onsubmit)}>
                    <Typography className='col-span-full' variant='h1' sx={{ marginBottom: "2rem", fontSize: { xs: '1.5rem', md: '2rem', lg: '3rem' }, color: '#2C306F' }}>
                        User Registration Details
                    </Typography>
                    <Controller
                        control={control}
                        name='name_of_business'

                        render={({ field }) =>
                            <CustomTextField
                                variant="standard"
                                inputType='text' fieldLabel='Business Name' field={field} errorDetail='name_of_business' disabled={true}
                                errors={errors}
                            />}
                    />

                    <Controller
                        control={control}
                        name='address'


                        render={({ field }) =>
                            <CustomTextField
                                variant="standard"
                                inputType='text' fieldLabel='Address' field={field} errorDetail='address' disabled={true}
                                errors={errors}
                            />}
                    >
                    </Controller>
                    <Controller
                        control={control}
                        name='tin'

                        render={({ field }) =>
                            <CustomTextField
                                variant="standard"
                                inputType='text' fieldLabel='TIN' field={field} errorDetail='tin' disabled={true}
                                errors={errors}
                            />}
                    >
                    </Controller>
                    <Controller
                        control={control}
                        name='first_name'

                        render={({ field }) =>
                            <CustomTextField
                                variant="standard"
                                inputType='text' fieldLabel='Name of Primary Contact Person' field={field} errorDetail='first_name' disabled={true} helperText="text"
                                errors={errors}
                            />}
                    >
                    </Controller>
                    <Controller
                        control={control}
                        name='designation'

                        render={({ field }) =>
                            <CustomTextField
                                variant="standard"
                                inputType='text' fieldLabel='Designation' field={field} errorDetail='designation' disabled={true}
                                errors={errors}
                            />}
                    >
                    </Controller>
                    <Controller
                        control={control}
                        name='telephone_number'

                        render={({ field }) =>
                            <CustomTextField
                                variant="standard"
                                inputType='number' fieldLabel='Telephone Number' field={field} errorDetail='telephone_number' disabled={true}
                                errors={errors}
                            />}
                    >
                    </Controller>
                    <Controller
                        control={control}
                        name='cell_phone_number'

                        render={({ field }) =>
                            <CustomTextField
                                variant="standard"
                                inputType='number' fieldLabel='Cellphone Number' field={field} errorDetail='cell_phone_number' disabled={true}
                                errors={errors}
                            />}
                    >
                    </Controller>
                    <Controller
                        control={control}
                        name='email_id'

                        render={({ field }) =>
                            <CustomTextField
                                variant="standard"
                                inputType='email' fieldLabel='Email ID' field={field} errorDetail='email_id' disabled={true}
                                errors={errors}
                            />}
                    >
                    </Controller>
                    {query.check === '1' ? <Box className="col-span-full flex justify-center mt-6 gap-4">
                        <CustomButton text='Accept' bgColor='#1F892A' handleClick={handleClickOpen} />

                        <CustomButton text='Reject' bgColor='#ff0000' handleClick={handleClickOpenReject} />

                        <Dialog
                            open={open}
                            TransitionComponent={Transition}
                            keepMounted
                            onClose={handleClose}
                            aria-describedby="alert-dialog-slide-description"
                        >
                            <DialogTitle>{"Are you sure you want to accept this user request?"}</DialogTitle>

                            <DialogActions>
                                <Button type="submit" onClick={handleClose}>Cancel</Button>
                                <Button type="submit" onClick={handleSubmit(onsubmit)}>Agree</Button>
                            </DialogActions>
                        </Dialog>

                        <Dialog
                            open={openReject}
                            TransitionComponent={Transition}
                            keepMounted
                            onClose={handleClose2}
                            aria-describedby="alert-dialog-slide-description"
                        >
                            <DialogTitle>{"Are you sure you want to reject this user request?"}</DialogTitle>

                            <DialogActions>
                                <Button type="submit" onClick={handleClose2}>Cancel</Button>
                                <Button type="submit" onClick={handleSubmit(onsubmit2)}>Reject</Button>
                            </DialogActions>
                        </Dialog>


                    </Box> : null}

                </Box>
            </Box>
            <Footer />
        </>

    )
}

export default Approvalcheck

